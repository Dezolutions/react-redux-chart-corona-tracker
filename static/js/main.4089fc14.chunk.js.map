{"version":3,"sources":["components/Cards.jsx","redux/action.js","components/Chart.jsx","components/CountryPicker.jsx","App.jsx","redux/reducer.js","redux/index.js","index.js"],"names":["Cards","values","useSelector","state","data","className","Object","keys","length","start","end","confirmed","value","duration","separator","Date","lastUpdate","toDateString","recovered","deaths","fetchCorona","country","dispatch","a","url","axios","get","then","setData","onError","type","onSetCountry","payload","setDataDaily","Chart","useDispatch","React","useEffect","res","map","totalConfirmed","totalRecovered","total","date","reportDate","error","labels","datasets","label","backgroundColor","options","legend","display","title","text","dataDaily","toLocaleDateString","borderColor","fill","CountryPicker","useState","setCountry","htmlFor","name","onKeyDown","e","code","onChange","target","classnames","onClick","App","initialState","reducer","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4089fc14.chunk.js","sourcesContent":["import React from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport CountUp from 'react-countup'\r\nimport '../scss/cards.scss'\r\nconst Cards = () => {\r\n  const values = useSelector(state => state.data)\r\n  return (\r\n    <div className=\"cards\">\r\n      {Object.keys(values).length\r\n      &&\r\n      <>\r\n        <div className=\"cards__item\">\r\n          <h1 className=\"cards__item-title\">Infected</h1>\r\n          <CountUp \r\n            start={0} \r\n            end={values.confirmed.value} \r\n            duration={1} \r\n            separator=\",\" \r\n            className=\"cards__item-value\"/>\r\n            <p className=\"cards__item-date\">{new Date(values.lastUpdate).toDateString()}</p>\r\n            <p className=\"cards__item-text\">Number of active cases of COVID-19</p>\r\n        </div>\r\n        <div className=\"cards__item\">\r\n          <h1 className=\"cards__item-title\">Recovered</h1>\r\n          <CountUp \r\n            start={0} \r\n            end={values.recovered.value} \r\n            duration={1} \r\n            separator=\",\" \r\n            className=\"cards__item-value\"/>\r\n            <p className=\"cards__item-date\">{new Date(values.lastUpdate).toDateString()}</p>\r\n            <p className=\"cards__item-text\">Number of recovered people of COVID-19</p>\r\n        </div>\r\n        <div className=\"cards__item\">\r\n          <h1 className=\"cards__item-title\">Died</h1>\r\n          <CountUp \r\n            start={0} \r\n            end={values.deaths.value} \r\n            duration={1} \r\n            separator=\",\" \r\n            className=\"cards__item-value\"/>\r\n            <p className=\"cards__item-date\">{new Date(values.lastUpdate).toDateString()}</p>\r\n            <p className=\"cards__item-text\">Number of death caused by COVID-19</p>\r\n        </div>\r\n      </>\r\n      }\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Cards\r\n","import axios from 'axios'\r\n\r\nexport const fetchCorona = (country) => async (dispatch)  => {\r\n  let url = 'https://covid19.mathdro.id/api';\r\n  if(country){\r\n    url = `https://covid19.mathdro.id/api/countries/${country}`\r\n  }\r\n  try {\r\n    await axios.get(url)\r\n    .then(({data: {confirmed,recovered,deaths,lastUpdate}}) => {\r\n      return dispatch(setData({confirmed, recovered, deaths, lastUpdate})) \r\n    })\r\n  } catch (e) { \r\n    dispatch(onError())\r\n   }\r\n}\r\n\r\nexport const fetchCoronaDaily = () => async (dispatch)  => {\r\n  try {\r\n    await axios.get('https://covid19.mathdro.id/api/daily')\r\n    .then(({data}) => {\r\n      const res = data.map(({totalConfirmed,totalRecovered,deaths: {total},reportDate}) => ({\r\n        confirmed: totalConfirmed,\r\n        totalRecovered,\r\n        deaths: total,\r\n        date : reportDate\r\n      }))\r\n      return dispatch(setDataDaily(res))\r\n      \r\n    })\r\n  } catch (e) { throw e }\r\n}\r\n\r\nexport const onError = () => ({\r\n  type: 'SET_ERROR'\r\n})\r\n\r\nexport const onSetCountry = data => ({\r\n  type: 'SET_COUNTRY',\r\n  payload: data\r\n})\r\n\r\nexport const setDataDaily = data => ({\r\n  type: 'SET_DATA_DAILY',\r\n  payload: data\r\n})\r\n\r\nexport const setData = data => ({\r\n  type: 'SET_DATA',\r\n  payload: data\r\n})","import React from 'react'\r\nimport { Line, Bar } from 'react-chartjs-2';\r\nimport {useSelector,useDispatch} from 'react-redux'\r\nimport {fetchCoronaDaily,fetchCorona} from '../redux/action'\r\nimport '../scss/chart.scss'\r\nconst Chart = () => {\r\n  const dispatch = useDispatch()\r\n  const state = useSelector(state => state)\r\n  React.useEffect(() => {\r\n    dispatch(fetchCoronaDaily())\r\n    dispatch(fetchCorona())\r\n  },[])\r\n\r\n  return (\r\n    <div className=\"chart\">\r\n      {!state.error &&  state.country \r\n        ? <Bar\r\n            data={{\r\n              labels: ['Infected', 'Recovered', 'Deaths'],\r\n              datasets: [\r\n                {\r\n                  label: 'People',\r\n                  backgroundColor: ['rgb(229, 156, 243)', 'rgb(156, 243, 156)', 'rgb(243, 156, 156)'],\r\n                  data: [state.data.confirmed.value, state.data.recovered.value, state.data.deaths.value],\r\n                },\r\n              ],\r\n            }}\r\n            options={{\r\n              legend: { display: false },\r\n              title: { display: true, text: `Current state in ${state.country}`},\r\n            }}\r\n          />\r\n        : Object.keys(state.dataDaily).length\r\n          &&\r\n            <Line\r\n            data={{\r\n              labels: state.dataDaily.map(({date}) => new Date(date).toLocaleDateString()),\r\n              datasets: [{\r\n                data: state.dataDaily.map(data => data.confirmed),\r\n                label: 'Infected',\r\n                borderColor: 'rgb(229, 156, 243)',\r\n                fill: true,\r\n              }, {\r\n                data: state.dataDaily.map((data) => data.deaths),\r\n                label: 'Deaths',\r\n                borderColor: 'red',\r\n                backgroundColor: 'rgb(243, 156, 156)',\r\n                fill: true,\r\n              },  {\r\n                data: state.dataDaily.map((data) => data.recovered),\r\n                label: 'Recovered',\r\n                borderColor: 'green',\r\n                backgroundColor: 'rgb(156, 243, 156)',\r\n                fill: true,\r\n              },\r\n              ],\r\n            }}  \r\n            />\r\n      }\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Chart\r\n","import React from 'react'\r\nimport {useDispatch,useSelector} from 'react-redux'\r\nimport {fetchCorona,onSetCountry} from '../redux/action'\r\nimport classnames from 'classnames'\r\nimport '../scss/country.scss'\r\nconst CountryPicker = () => {\r\n  const dispatch = useDispatch()\r\n  const [country,setCountry] = React.useState('')\r\n  const error = useSelector(state => state.error)\r\n  const onFind = () => {\r\n    dispatch(fetchCorona(country))\r\n    dispatch(onSetCountry(country))\r\n  }\r\n  const onEnter =  e => {\r\n    if(e.code === 'Enter'){\r\n      dispatch(fetchCorona(country))\r\n      dispatch(onSetCountry(country))\r\n    }    \r\n  }\r\n\r\n  const onInputCountry = (e) => {\r\n    setCountry(e.target.value)  \r\n  }\r\n\r\n  return (\r\n    <div className=\"country\">\r\n      <div>\r\n        {error && <label className=\"error__message\" htmlFor=\"country\">Enter a correct country</label>}\r\n        <br/>\r\n        <input type=\"text\" name=\"country\" value={country} onKeyDown={onEnter} onChange={onInputCountry} className={classnames('country__input',{'error': error})}/>\r\n      </div>\r\n      <button className=\"country__btn\" onClick={onFind}>find</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CountryPicker\r\n","import React from 'react'\nimport Cards from './components/Cards'\nimport Chart from './components/Chart'\nimport CountryPicker from './components/CountryPicker'\nimport './scss/app.scss'\n\nfunction App() {\n   \n  return (\n    <div className=\"app\">\n      <h1 className='app__title'>Corona Tracker</h1>\n      <Cards/>\n      <CountryPicker/>\n      <Chart/>\n    </div>\n  );\n}\n\nexport default App;\n","const initialState = {\r\n  data: {},\r\n  dataDaily: {},\r\n  country: '',\r\n  error: ''\r\n}\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'SET_DATA':\r\n      return {\r\n        ...state,\r\n        error: '',\r\n        data: action.payload\r\n      }\r\n    case 'SET_DATA_DAILY':\r\n      return {\r\n        ...state,\r\n        error: '',\r\n        dataDaily: action.payload\r\n      }\r\n    case 'SET_COUNTRY':\r\n      return {\r\n        ...state,\r\n        error: '',\r\n        country: action.payload\r\n      }\r\n    case 'SET_ERROR':\r\n      return {\r\n        ...state,\r\n        error: 'error'\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n\r\n}\r\n\r\nexport default reducer","import {createStore, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport reducer from './reducer'\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  applyMiddleware(thunk)\r\n)\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from 'react-redux'\nimport store from './redux'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}